{"state":{"content":"<h1>Revalidation</h1>\n<p>Sometimes, you'll want to use build-time state generation, but you'll want to update the state you've generated at a later date. For example, let's say you have a website that lists the latest news, and build state is used to do that. If you want to update this news every hour, you could do that with revalidation! (This avoids much of the overhead of request-time state, which must be generated before every single page load, and has no opportunity for caching.)</p>\n<p>Generally, if you can use it, revalidation will yield better performance than request-time state.</p>\n<h2>Time-based revalidation</h2>\n<p>The first type of revalidation is the simplest: you set a schedule with <code>.revalidate_after()</code> on <code>Template</code>, which takes either a <code>Duration</code> (from <code>chrono</code> or the standard library) or a string of the form <code>&lt;num&gt;&lt;unit&gt;</code>, like <code>1h</code> for one hour. You can read more about that <a href=\"https://docs.rs/perseus/0.4/perseus/template/struct.TemplateInner.html\">here</a>.</p>\n<p>This will cause the Perseus build process to, for each page that this template generates, note down the current time, and write that to a file. Then, on each request, it will check if the current time is later than that recorded time, plus the revalidation interval. If so, then it will re-execute the build state function, and update the state accordingly. Templates using revalidation have their pages stored in the mutable store, since they may update later.</p>\n<p>Crucially, this is lazy revalidation: Perseus will not immediately revalidate a page once the revalidation interval is reached. For example, if our news site isn't very popular for its first month, and only gets two visits per day, it won't revalidate 24 times, it will probably revalidate twice: because only two people visited. This also means that revalidation can behave in unexpected ways. Let's say you have a page that revalidates every five seconds, and it's built at second 0. If, no-one requests it until second 6, and then there's a request every second, it will revalidate at second 6, then second 11, then second 16, etc. You may need to re-read that to understand this, and it's usually not a problem, unless you have very strict requirements.</p>\n<p>Note that this is all page-specific, so it's entirely possible for two different pages in the same template to have the same revalidation interval and revalidate at different times.</p>\n<h2>Logic-based revalidation</h2>\n<p>When you have more stringent needs, you might wish to use logic-based revalidation, which is based on the <code>.should_revalidate_fn()</code> method on <code>Template</code>. To this, you provide an <code>async</code> function of the usual sort with the usual <code>BlamedError&lt;E&gt;</code> error handling (see <a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/build\">here</a> for an explanation of that) that takes a <a href=\"https://docs.rs/perseus/0.4/perseus/prelude/struct.StateGeneratorInfo.html\"><code>StateGeneratorInfo</code></a> instance and the user's request, and you return a <code>bool</code>: if it's true, the page will revalidate, but, if <code>false</code>, the old state will stand. This can be used to do more advanced things like having a database of new news, but also having a micro-site set to tell you whether or not there is new news. Thus, you can perform the quicker check to the micro-site (which acts as a <a href=\"https://en.wikipedia.org/wiki/Sentinel_species\">canary</a>) to avoid unnecessary revalidations, which will improve performance.</p>\n<p>Using both logic-based revalidation <em>and</em> time-based revalidation is perfectly permissible, as the logic-based revalidation will only be executed on the interval of the time-based. For our news site, therefore, we might want to use the logic-based revalidation to check a canary as to whether or not there is any new news, and then only run that check hourly. This would lead to hourly checks of whether or not we <em>should</em> revalidate, rather than just blindly doing so, which can improve performance greatly.</p>\n<h2>Example</h2>\n<p>An example of using both logic-based and time-based revalidation together is below.</p>\n<pre><code class=\"language-rust\">use perseus::prelude::*;\nuse serde::{Deserialize, Serialize};\nuse sycamore::prelude::*;\n\n#[derive(Serialize, Deserialize, Clone, ReactiveState)]\n#[rx(alias = &quot;PageStateRx&quot;)]\nstruct PageState {\n    time: String,\n}\n\nfn revalidation_page&lt;'a, G: Html&gt;(cx: BoundedScope&lt;'_, 'a&gt;, state: &amp;'a PageStateRx) -&gt; View&lt;G&gt; {\n    view! { cx,\n        p { (format!(&quot;The time when this page was last rendered was '{}'.&quot;, state.time.get())) }\n    }\n}\n\npub fn get_template&lt;G: Html&gt;() -&gt; Template&lt;G&gt; {\n    Template::build(&quot;revalidation&quot;)\n        .view_with_state(revalidation_page)\n        // This page will revalidate every five seconds (and so the time displayed will be updated)\n        .revalidate_after(&quot;5s&quot;)\n        // This is an alternative method of revalidation that uses logic, which will be executed\n        // every time a user tries to load this page. For that reason, this should NOT do\n        // long-running work, as requests will be delayed. If both this\n        // and `revalidate_after()` are provided, this logic will only run when `revalidate_after()`\n        // tells Perseus that it should revalidate.\n        .should_revalidate_fn(should_revalidate)\n        .build_state_fn(get_build_state)\n        .build()\n}\n\n// This will get the system time when the app was built\n#[engine_only_fn]\nasync fn get_build_state(_info: StateGeneratorInfo&lt;()&gt;) -&gt; PageState {\n    PageState {\n        time: format!(&quot;{:?}&quot;, std::time::SystemTime::now()),\n    }\n}\n\n// This will run every time `.revalidate_after()` permits the page to be\n// revalidated This acts as a secondary check, and can perform arbitrary logic\n// to check if we should actually revalidate a page.\n//\n// Since this takes the request, this uses a `BlamedError` if it's fallible.\n#[engine_only_fn]\nasync fn should_revalidate(\n    // This takes the same arguments as request state\n    _info: StateGeneratorInfo&lt;()&gt;,\n    _req: perseus::Request,\n) -&gt; Result&lt;bool, BlamedError&lt;std::convert::Infallible&gt;&gt; {\n    // For simplicity's sake, this will always say we should revalidate, but you\n    // could make this check any condition\n    Ok(true)\n}\n\n</code></pre>\n","current_version":"next","manifest":{"0.1.x":{"docs_rs":"0.1","git":"v0.1.4","state":"outdated"},"0.2.x":{"docs_rs":"0.2","git":"v0.2.3","state":"outdated"},"0.3.0-0.3.3":{"docs_rs":"0.3.3","git":"v0.3.3","state":"outdated"},"0.3.4":{"docs_rs":"0.3","git":"v0.3.6","state":"outdated"},"0.4.x":{"docs_rs":"0.4","git":"HEAD","state":"stable"}},"sidebar_content":"<h1>Introduction</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/intro\">Introduction</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/quickstart\">Quickstart</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/what-is-perseus\">What is Perseus?</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/core-principles\">Core Principles</a></li>\n</ul>\n<h1>Your First App</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/installation\">Installing Perseus</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/defining\">Defining your app</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/generating-pages\">Generating pages</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/dev-cycle\">Development cycle</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/error-handling\">Error handling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/first-app/deploying\">Deploying your app</a></li>\n</ul>\n<h1>Fundamentals</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/perseus-app\"><code>PerseusApp</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/reactor\">The reactor</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/routing\">Routing and navigation</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/preloading\">Preloading</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/i18n\">Internationalization</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/error-views\">Error views</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/hydration\">Hydration</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/static-content\">Static content</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/head-headers\">Heads and headers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/styling\">Styling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/js-interop\">Working with JS</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/serving-exporting\">Servers and exporting</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/debugging\">Debugging</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/testing\">Writing tests</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/plugins\">Plugins</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/fundamentals/compilation-times\">Improving Compilation Times</a></li>\n</ul>\n<h1>The State Platform</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/intro\">Understanding state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/build\">Build-time state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/request\">Request-time state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/revalidation\">Revalidation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/incremental\">Incremental generation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/amalgamation\">State amalgamation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/browser\">Using state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/global\">Global state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/helper\">Helper state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/suspense\">Suspended state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/freezing-thawing\">Freezing and thawing</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/state/manual\">Manually implementing <code>ReactiveState</code></a></li>\n</ul>\n<h1>Capsules</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/capsules/intro\">Introduction</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/capsules/using\">Using capsules</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/capsules/capsules-vs-components\">Capsules vs. components</a></li>\n</ul>\n<h1>Miscellaneous</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/migrating\">Migrating from v0.3.x</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/next/faq\">Common pitfalls and FAQs</a></li>\n</ul>\n","status":"Next","title":"Revalidation"},"head":"<title>Revalidation | Perseus Docs</title><link rel=stylesheet href=.perseus/static/styles/markdown.css><link rel=stylesheet href=.perseus/static/styles/docs_links_markdown.css><link rel=stylesheet href=.perseus/static/prism.css>"}