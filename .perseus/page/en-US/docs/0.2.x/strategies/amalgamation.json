{"state":{"content":"<h1>State Amalgamation</h1>\n<p>In the introduction to this section, we mentioned that all these rendering strategies are compatible with one another, though we didn't explain how the two strategies that generate unique properties for a template can possible be compatible. That is, how can you use <em>build state</em> and <em>request state</em> in the same template? To our knowledge, Perseus is the only framework in the world (in any language) that supports using both, and it's made possible by <em>state amalgamation</em>, which lets you provide an arbitrary function that can merge conflicting states from these two strategies!</p>\n<h2>Usage</h2>\n<p>Here's an example from <a href=\"https://github.com/framesurge/perseus/blob/main/examples/showcase/src/templates/amalgamation.rs\">here</a>:</p>\n<pre><code class=\"language-rust,no_run,no-playground\">use perseus::{Request, States, StringResultWithCause, Template};\nuse serde::{Deserialize, Serialize};\nuse std::rc::Rc;\nuse sycamore::prelude::{component, template, GenericNode, Template as SycamoreTemplate};\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct AmalagamationPageProps {\n    pub message: String,\n}\n\n#[component(AboutPage&lt;G&gt;)]\npub fn about_page(props: AmalagamationPageProps) -&gt; SycamoreTemplate&lt;G&gt; {\n    template! {\n        p { (format!(&quot;The message is: '{}'&quot;, props.message)) }\n    }\n}\n\npub fn get_template&lt;G: GenericNode&gt;() -&gt; Template&lt;G&gt; {\n    Template::new(&quot;amalgamation&quot;)\n        .build_state_fn(Rc::new(get_build_state))\n        .request_state_fn(Rc::new(get_request_state))\n        .amalgamate_states_fn(Rc::new(amalgamate_states))\n        .template(template_fn())\n}\n\npub fn amalgamate_states(states: States) -&gt; StringResultWithCause&lt;Option&lt;String&gt;&gt; {\n    // We know they'll both be defined\n    let build_state =\n        serde_json::from_str::&lt;AmalagamationPageProps&gt;(&amp;states.build_state.unwrap()).unwrap();\n    let req_state =\n        serde_json::from_str::&lt;AmalagamationPageProps&gt;(&amp;states.request_state.unwrap()).unwrap();\n\n    Ok(Some(\n        serde_json::to_string(&amp;AmalagamationPageProps {\n            message: format!(\n                &quot;Hello from the amalgamation! (Build says: '{}', server says: '{}'.)&quot;,\n                build_state.message, req_state.message\n            ),\n        })\n        .unwrap(),\n    ))\n}\n\npub async fn get_build_state(_path: String) -&gt; StringResultWithCause&lt;String&gt; {\n    Ok(serde_json::to_string(&amp;AmalagamationPageProps {\n        message: &quot;Hello from the build process!&quot;.to_string(),\n    })\n    .unwrap())\n}\n\npub async fn get_request_state(_path: String, _req: Request) -&gt; StringResultWithCause&lt;String&gt; {\n    // Err((&quot;this is a test error!&quot;.to_string(), perseus::ErrorCause::Client(None)))\n    Ok(serde_json::to_string(&amp;AmalagamationPageProps {\n        message: &quot;Hello from the server!&quot;.to_string(),\n    })\n    .unwrap())\n}\n\npub fn template_fn&lt;G: GenericNode&gt;() -&gt; perseus::template::TemplateFn&lt;G&gt; {\n    Rc::new(|props| {\n        template! {\n            AboutPage(\n                serde_json::from_str::&lt;AmalagamationPageProps&gt;(&amp;props.unwrap()).unwrap()\n            )\n        }\n    })\n}\n\n</code></pre>\n<p>This example illustrates a very simple amalgamation, taking the states of both strategies to produce a new state that combines the two. Note that this also uses <code>StringResultWithCause</code> as a return type (see the section on the <a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/build-state\"><em>build state</em></a> strategy for more information). It will be passed an instance of <code>States</code>, which you can learn more about in the <a href=\"https://docs.rs/perseus\">API docs</a>.</p>\n","current_version":"0.2.x","manifest":{"0.1.x":{"docs_rs":"0.1","git":"v0.1.4","state":"outdated"},"0.2.x":{"docs_rs":"0.2","git":"v0.2.3","state":"outdated"},"0.3.0-0.3.3":{"docs_rs":"0.3.3","git":"v0.3.3","state":"outdated"},"0.3.4":{"docs_rs":"0.3","git":"v0.3.6","state":"outdated"},"0.4.x":{"docs_rs":"0.4","git":"HEAD","state":"stable"}},"sidebar_content":"<h1>Introduction</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/intro\">Introduction</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/what-is-perseus\">What is Perseus?</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/hello-world\">Hello World!</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/second-app\">Your Second App</a></li>\n</ul>\n<hr />\n<h1>Reference</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/define-app\"><code>define_app!</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/views\">Writing Views</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/debugging\">Debugging</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/intro\">Templates and Routing</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/metadata-modification\">Modifying the <code>&lt;head&gt;</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/setting-headers\">Modifying HTTP Headers</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/error-pages\">Error Pages</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/static-content\">Static Content</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/intro\">Internationalization</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/defining\">Defining Translations</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/using\">Using Translations</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/translations-managers\">Translations Managers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/other-engines\">Other Translation Engines</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/intro\">Rendering Strategies</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/build-state\">Build State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/build-paths\">Build Paths</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/request-state\">Request State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/revalidation\">Revalidation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/incremental\">Incremental Generation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/amalgamation\">State Amalgamation</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/cli\">CLI</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/ejecting\">Ejecting</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/config-managers\">Config Managers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/intro\">Testing</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/checkpoints\">Checkpoints</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/fantoccini-basics\">Fantoccini Basics</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/manual\">Manual Testing</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/styling\">Styling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/deploying/intro\">Deploying</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/deploying/exporting\">Static Exporting</a></li>\n<li><a href=\"\">Server Deployment</a></li>\n<li><a href=\"\">Serverless Deployment</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/updating\">Migrating from v0.1.x</a></li>\n</ul>\n<hr />\n<h1>Advanced</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/intro\">Under the Hood</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/arch\">Architecture</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/initial-loads\">Initial Loads</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/subsequent-loads\">Subsequent Loads</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/routing\">Routing</a></li>\n</ul>\n</li>\n</ul>\n","status":"Outdated","title":"State Amalgamation"},"head":"<title>State Amalgamation | Perseus Docs</title><link rel=stylesheet href=.perseus/static/styles/markdown.css><link rel=stylesheet href=.perseus/static/styles/docs_links_markdown.css><link rel=stylesheet href=.perseus/static/prism.css>"}