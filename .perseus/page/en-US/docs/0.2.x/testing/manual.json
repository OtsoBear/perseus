{"state":{"content":"<h1>Manual Testing</h1>\n<p>Occasionally, the Perseus testing harness may be a little too brittle for your needs, particularly if you'd like to pass custom arguments to the WebDriver (e.g. to spoof media streams). In these cases, you'll want to break out of it entirely and work with Fantoccini manually.</p>\n<p>You should do this by wrapping your normal test function in another function and annotating that with <code>[tokio::test]</code>, which will mark it as a normal asynchronous test. Then, you can mimic the behavior of the Perseus test harness almost exactly with the following code (adapted from the macro <a href=\"https://github.com/framesurge/perseus/blob/main/packages/perseus-macro/src/test.rs\">here</a>):</p>\n<pre><code class=\"language-rust\">// Only run the test if the environment variable is specified (avoids having to do exclusions for workspace `cargo test`)\nif ::std::env::var(&quot;PERSEUS_RUN_WASM_TESTS&quot;).is_ok() {\n    let headless = ::std::env::var(&quot;PERSEUS_RUN_WASM_TESTS_HEADLESS&quot;).is_ok();\n    // Set the capabilities of the client\n    let mut capabilities = ::serde_json::Map::new();\n    let firefox_opts;\n    let chrome_opts;\n    if headless {\n        firefox_opts = ::serde_json::json!({ &quot;args&quot;: [&quot;--headless&quot;] });\n        chrome_opts = ::serde_json::json!({ &quot;args&quot;: [&quot;--headless&quot;] });\n    } else {\n        firefox_opts = ::serde_json::json!({ &quot;args&quot;: [] });\n        chrome_opts = ::serde_json::json!({ &quot;args&quot;: [] });\n    }\n    capabilities.insert(&quot;moz:firefoxOptions&quot;.to_string(), firefox_opts);\n    capabilities.insert(&quot;goog:chromeOptions&quot;.to_string(), chrome_opts);\n\n    let mut client = ::fantoccini::ClientBuilder::native()\n        .capabilities(capabilities)\n        .connect(&amp;&quot;http://localhost:4444&quot;).await.expect(&quot;failed to connect to WebDriver&quot;);\n    let output = fn_internal(&amp;mut client).await;\n    // Close the client no matter what\n    client.close().await.expect(&quot;failed to close Fantoccini client&quot;);\n    // Panic if the test failed\n    if let Err(err) = output {\n        panic!(&quot;test failed: '{}'&quot;, err.to_string())\n    }\n}\n</code></pre>\n<p>Then, you can relatively easily modify the properties sent to the WebDriver instance with <code>firefox_opts</code> and <code>chrome_opts</code>. You can see the documentation for their options <a href=\"https://developer.mozilla.org/en-US/docs/Web/WebDriver/Capabilities/firefoxOptions\">here</a> (Firefox) and <a href=\"https://sites.google.com/a/chromium.org/chromedriver/capabilities\">here</a> (Chrome/Chromium).</p>\n","current_version":"0.2.x","manifest":{"0.1.x":{"docs_rs":"0.1","git":"v0.1.4","state":"outdated"},"0.2.x":{"docs_rs":"0.2","git":"v0.2.3","state":"outdated"},"0.3.0-0.3.3":{"docs_rs":"0.3.3","git":"v0.3.3","state":"outdated"},"0.3.4":{"docs_rs":"0.3","git":"v0.3.6","state":"outdated"},"0.4.x":{"docs_rs":"0.4","git":"HEAD","state":"stable"}},"sidebar_content":"<h1>Introduction</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/intro\">Introduction</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/what-is-perseus\">What is Perseus?</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/hello-world\">Hello World!</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/second-app\">Your Second App</a></li>\n</ul>\n<hr />\n<h1>Reference</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/define-app\"><code>define_app!</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/views\">Writing Views</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/debugging\">Debugging</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/intro\">Templates and Routing</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/metadata-modification\">Modifying the <code>&lt;head&gt;</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/templates/setting-headers\">Modifying HTTP Headers</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/error-pages\">Error Pages</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/static-content\">Static Content</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/intro\">Internationalization</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/defining\">Defining Translations</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/using\">Using Translations</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/translations-managers\">Translations Managers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/i18n/other-engines\">Other Translation Engines</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/intro\">Rendering Strategies</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/build-state\">Build State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/build-paths\">Build Paths</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/request-state\">Request State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/revalidation\">Revalidation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/incremental\">Incremental Generation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/strategies/amalgamation\">State Amalgamation</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/cli\">CLI</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/ejecting\">Ejecting</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/config-managers\">Config Managers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/intro\">Testing</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/checkpoints\">Checkpoints</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/fantoccini-basics\">Fantoccini Basics</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/testing/manual\">Manual Testing</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/styling\">Styling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/deploying/intro\">Deploying</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/deploying/exporting\">Static Exporting</a></li>\n<li><a href=\"\">Server Deployment</a></li>\n<li><a href=\"\">Serverless Deployment</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/updating\">Migrating from v0.1.x</a></li>\n</ul>\n<hr />\n<h1>Advanced</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/intro\">Under the Hood</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/arch\">Architecture</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/initial-loads\">Initial Loads</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/subsequent-loads\">Subsequent Loads</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.2.x/advanced/routing\">Routing</a></li>\n</ul>\n</li>\n</ul>\n","status":"Outdated","title":"Manual Testing"},"head":"<title>Manual Testing | Perseus Docs</title><link rel=stylesheet href=.perseus/static/styles/markdown.css><link rel=stylesheet href=.perseus/static/styles/docs_links_markdown.css><link rel=stylesheet href=.perseus/static/prism.css>"}